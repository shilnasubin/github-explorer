{"version":3,"sources":["actions/index.ts","actions/actionType.ts","constants/constants.ts","components/SearchBar.tsx","components/User.tsx","components/Repository.tsx","components/Loader.tsx","pages/SearchResult.tsx","App.tsx","serviceWorker.ts","reducers/searchInputReducer.ts","reducers/searchResultReducer.ts","reducers/index.ts","store/store.ts","index.tsx"],"names":["searchResultAction","searchResult","type","searchErrorAction","baseUrl","getSearchAction","searchText","category","dispatch","a","url","trackPromise","axios","get","then","res","data","items","catch","error","console","log","CATEGORY_LIST","SearchBar","searchCategories","history","useHistory","useDispatch","useSelector","state","searchInput","searchCategory","debouncedDispatch","useCallback","debounce","text","cat","useEffect","length","push","cancel","className","src","alt","placeholder","value","onChange","event","searchInputAction","target","name","id","map","ct","index","key","User","item","avatar_url","login","followers_url","href","html_url","rel","Repository","stargazers_count","description","owner","Loader","SearchResult","isError","promiseInProgress","usePromiseTracker","findComponent","App","path","exact","component","Boolean","window","location","hostname","match","initialState","searchInputReducer","action","intialState","persistConfig","storage","whiteList","allReducers","combineReducers","isLoading","soman","persistReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","persistor","persistStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.776ebb87.chunk.js","sourcesContent":["import { GitHubResult, SearchAction, SearchInputAction } from './../interfaces/types';\r\nimport { SEARCH_RESULT, SEARCH_CATEGORY,  SEARCH_ERROR, SEARCH_TEXT } from \"./actionType\";\r\nimport { trackPromise} from 'react-promise-tracker';\r\nimport axios from 'axios';\r\nimport { Dispatch } from 'redux';\r\n\r\n\r\nexport const searchResultAction = (searchResult: GitHubResult[]): SearchAction => {\r\n    return {\r\n        type: SEARCH_RESULT,\r\n        searchResult\r\n    }\r\n}\r\n\r\nexport const searchErrorAction = () => {\r\n    return {\r\n        type: SEARCH_ERROR,\r\n    }\r\n}\r\n\r\nexport const searchCategoryAction = (searchCategory: string): SearchInputAction => {\r\n    return {\r\n        type: SEARCH_CATEGORY,\r\n        searchCategory,\r\n    }\r\n}\r\n\r\nexport const searchInputAction = (searchText : string): SearchInputAction => {\r\n    return {\r\n        type: SEARCH_TEXT,\r\n        searchText\r\n    }\r\n}\r\n\r\nconst baseUrl = \"https://api.github.com/search\";\r\nexport const getSearchAction = (searchText: string, category: string) => {\r\n    return async (dispatch: Dispatch<any>) => {\r\n        let url = \"\";\r\n        switch (category) {\r\n            case \"Users\":\r\n                url = `${baseUrl}/users?q=${searchText}`;\r\n                break;\r\n            case \"Repositories\":\r\n                url = `${baseUrl}/repositories?q=${searchText}`;\r\n                break;\r\n            case \"Issues\":\r\n                url = `${baseUrl}/issues?q=${searchText}`;\r\n                break;\r\n        }\r\n        await trackPromise(\r\n         axios\r\n            .get(url)\r\n            .then(res => {\r\n                dispatch(searchResultAction(res.data.items));\r\n            })\r\n            .catch(error => {\r\n                dispatch(searchErrorAction);\r\n                console.log(error);\r\n            }))\r\n    }\r\n}","export const SEARCH_REQUEST : string = 'SEARCH_REQUEST';\r\nexport const SEARCH_RESULT : string = 'SEARCH_RESULT';\r\nexport const SEARCH_ERROR : string = 'SEARCH_ERROR';\r\n\r\nexport const SEARCH_TEXT : string = 'SEARCH_TEXT';\r\nexport const SEARCH_CATEGORY : string = 'SEARCH_CATEGORY';","export const CATEGORY_LIST = [\"Users\", \"Repositories\"];","import React, { useEffect, FunctionComponent, useCallback } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getSearchAction, searchResultAction, searchInputAction, searchCategoryAction } from '../actions';\r\nimport { CATEGORY_LIST } from '../constants/constants';\r\nimport debounce from 'lodash.debounce';\r\nimport { AppState } from '../interfaces/types';\r\nimport { useHistory } from 'react-router-dom';\r\nimport \"./SearchBar.scss\";\r\n\r\nconst SearchBar: FunctionComponent = () => {\r\n    const searchCategories = CATEGORY_LIST;\r\n\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n\r\n    const category = useSelector(state => (state as AppState).searchInput.searchCategory as string);\r\n    const searchText = useSelector(state => (state as AppState).searchInput.searchText as string);\r\n\r\n    // category dropdown change event\r\n    const onSearchCategoryChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\r\n        dispatch(searchCategoryAction(event.target.value));\r\n        if (searchText.length > 2) {\r\n            dispatch(getSearchAction(searchText, event.target.value));\r\n        }\r\n    }\r\n\r\n    // search text change event\r\n    const onSearchTextChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        // dispatch(searchRequestAction);\r\n        dispatch(searchInputAction(event.target.value));\r\n    }\r\n\r\n    const debouncedDispatch = useCallback(debounce((text: string, cat: string) => dispatch(getSearchAction(text, cat)), 300), []);\r\n\r\n    useEffect(() => {\r\n        if (searchText.length > 2) {\r\n\r\n            // dispatch(searchRequestAction);\r\n            debouncedDispatch(searchText, category);\r\n\r\n            // change route to results page\r\n            history.push(\"/result\");\r\n\r\n            // Cancel previous debounce calls during useEffect cleanup.\r\n            return debouncedDispatch.cancel;\r\n        }\r\n        else {\r\n            dispatch(searchResultAction([]));\r\n\r\n            // reset route\r\n            history.push(\"/\");\r\n        }\r\n    })\r\n\r\n    return (\r\n        <div className=\"search-bar\">\r\n            <div className=\"title-block\">\r\n                <img className=\"logo\" src=\"images/github-logo.png\" alt=\"github-logo\" />\r\n                <div className=\"details\">\r\n                    <h1 className=\"title\">GitHub Searcher</h1>\r\n                    <p>Search users or repositories below</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"github-search\">\r\n                <input type=\"text\" className=\"search-text\" placeholder=\"Start typing to search ..\" value={searchText} onChange={onSearchTextChange} />\r\n                <select className=\"search-category\" name=\"searchCategory\" id=\"searchCategory\" value={category} onChange={onSearchCategoryChange}>\r\n                    {\r\n                        searchCategories.map((ct, index) => {\r\n                            return <option value={ct} key={index}>{ct}</option>\r\n                        })\r\n                    }\r\n                </select>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBar;","import React, { FunctionComponent } from 'react';\r\nimport { GitHubResult } from '../interfaces/types';\r\nimport './User.scss';\r\n\r\ninterface UserProps {\r\n    item: GitHubResult\r\n}\r\n\r\nconst User: FunctionComponent<UserProps> = ({ item }: any) => {\r\n    return (\r\n        <div className=\"search-result-details user\">\r\n            <div className=\"account\">\r\n                <img src={item.avatar_url} alt=\"logo\" />\r\n                <h3 className=\"name\">{item.login}</h3>\r\n                <div className=\"follow-count\">\r\n                    <p>Followers: {item.followers_url?.length}</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"bio\">\r\n                <a href={item.html_url} target=\"_blank\" className=\"detailView\" rel=\"noopener noreferrer\">{item.html_url}</a>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default User;\r\n","import React, { FunctionComponent } from 'react';\r\nimport { GitHubResult } from '../interfaces/types';\r\nimport './Repository.scss';\r\n\r\ninterface RepositoryProp {\r\n    item: GitHubResult\r\n}\r\n\r\nconst Repository: FunctionComponent<RepositoryProp> = ({ item }) => {\r\n    return (\r\n        <div className=\"search-result-details repository\">\r\n            <a href={item.html_url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                <div className=\"star\">\r\n                    <img src=\"images/star.png\" alt=\"start\" />\r\n                    <p>{item.stargazers_count}</p>\r\n                </div>\r\n                <div className=\"account\">\r\n                    <img src=\"images/github-logo.png\" alt=\"logo\" />\r\n                    <h3 className=\"name\">{item.name}</h3>\r\n                    <p className=\"description\">{item.description}</p>\r\n                </div>\r\n                <div className=\"bio\">\r\n                    <img src={item.owner?.avatar_url} alt=\"\" />\r\n                    <h4 className=\"login\">{item.owner?.login}</h4>\r\n                </div>\r\n            </a>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Repository;","import React from 'react';\r\nimport './Loader.scss';\r\n\r\nexport const Loader = () => {\r\n    return (\r\n        <div className=\"loading\">\r\n            <div className=\"lds-spinner\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>\r\n        </div>\r\n    )\r\n}","import React, { FunctionComponent } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport './SearchResult.scss';\r\nimport User from '../components/User';\r\nimport Repository from '../components/Repository';\r\nimport { AppState, GitHubResult } from '../interfaces/types';\r\nimport { usePromiseTracker } from 'react-promise-tracker';\r\nimport { Loader } from '../components/Loader';\r\n\r\nconst SearchResult: FunctionComponent = () => {\r\n    const items = useSelector(state => (state as AppState).searchResult.items);\r\n    const category = useSelector(state => (state as AppState).searchInput.searchCategory);\r\n    const isError = useSelector(state => (state as AppState).searchResult.isError);\r\n\r\n    const { promiseInProgress } = usePromiseTracker();\r\n\r\n    const findComponent = (item: GitHubResult) => {\r\n        switch (category) {\r\n            case 'Users':\r\n                return <User item={item} />\r\n            case 'Repositories':\r\n                return <Repository item={item} />\r\n            default:\r\n                return \"Not Found\";\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"search-result\">\r\n            {\r\n                (isError === true) ? <div className=\"error\">Error occured for fetching data</div> :\r\n                    (promiseInProgress === true) ? <Loader /> :\r\n                        <ul>\r\n                            {\r\n                                items.map((item, index: number) => {\r\n                                    return (\r\n                                        <li key={index}>\r\n                                            {findComponent(item)}\r\n                                        </li>)\r\n                                })\r\n                            }\r\n                        </ul>\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchResult;","import React from 'react';\nimport './App.scss';\nimport SearchBar from './components/SearchBar';\nimport SearchResult from './pages/SearchResult';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nconst App = () => {\n  return (\n    <Router>\n      <div className=\"app\">\n        <SearchBar />\n        <Switch>\n          <Route path=\"/result\" exact component={SearchResult}></Route>\n        </Switch>\n      </div>\n    </Router>\n  )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { SEARCH_TEXT } from '../actions/actionType';\r\nimport { SEARCH_CATEGORY } from \"../actions/actionType\";\r\nimport { CATEGORY_LIST } from \"../constants/constants\";\r\nimport { SearchInputAction } from '../interfaces/types';\r\n\r\nconst searchCategory = CATEGORY_LIST.length > 0 ? CATEGORY_LIST[0] : '';\r\nconst initialState = {\r\n    searchCategory,\r\n    searchText: \"\"\r\n}\r\nconst searchInputReducer = (state = initialState, action: SearchInputAction) => {\r\n    switch (action.type) {\r\n        case SEARCH_CATEGORY:\r\n            return { ...state, searchCategory: action.searchCategory }\r\n        case SEARCH_TEXT:\r\n            return { ...state, searchText: action.searchText }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default searchInputReducer;","import { SEARCH_ERROR, SEARCH_REQUEST } from './../actions/actionType';\r\nimport { SEARCH_RESULT } from \"../actions/actionType\";\r\nimport { SearchAction, SearchResultState } from '../interfaces/types';\r\n\r\nvar intialState : SearchResultState = {\r\n    items: [],\r\n    isError: false,\r\n}\r\n\r\nexport const searchResultReducer = (state = intialState, action: SearchAction) => {\r\n    switch (action.type) {\r\n        case SEARCH_REQUEST:\r\n            return { ...state, items: [], isLoading: true, soman: \"SOMAN\" };\r\n        case SEARCH_RESULT:\r\n            return { ...state, items: action.searchResult, isLoading: false, soman: \"SASI\" };\r\n        case SEARCH_ERROR:\r\n            return { ...state, items: [], isError: true, isLoading: false };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import searchInputReducer from './searchInputReducer';\r\nimport { combineReducers } from 'redux';\r\nimport { persistReducer } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport { searchResultReducer } from './searchResultReducer';\r\n\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage,\r\n    whiteList: ['searchResult']\r\n}\r\nconst allReducers = combineReducers({\r\n    searchInput: searchInputReducer,\r\n    searchResult: searchResultReducer,\r\n});\r\n\r\nexport default persistReducer(persistConfig, allReducers);","import thunkMiddleware from 'redux-thunk';\r\nimport allReducers from '../reducers';\r\nimport { applyMiddleware, createStore, compose } from 'redux';\r\nimport { persistStore } from 'redux-persist';\r\n\r\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nexport const store = createStore(allReducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\nexport const persistor = persistStore(store);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { store, persistor } from './store/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate persistor={persistor}>\n      <App />\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}